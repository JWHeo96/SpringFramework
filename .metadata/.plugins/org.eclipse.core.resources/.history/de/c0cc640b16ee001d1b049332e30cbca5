package com.ezen.view.controller;

import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.multipart.MultipartFile;

import com.ezen.biz.dto.BoardVO;
import com.ezen.biz.service.BoardService;

@Controller
// "board"라는 속성이름으로 model 객체에 데이터 저장시 세션에도 동시에 저장됨.
@SessionAttributes("board")
public class BoardController {
	
	// 값이 1개일 때는 value= 생략 가능
	@Autowired
	private BoardService boardService;

	@RequestMapping("/insertBoard.do")
	public String insertBoard(BoardVO vo) throws Exception {
		System.out.println("게시글 등록  처리");
		
		// 업로드 파일 처리
		MultipartFile uploadFile = vo.getUploadFile();
		if(!uploadFile.isEmpty()) {
			String fileName = uploadFile.getOriginalFilename();
			System.out.println("fileName=" + fileName);
			uploadFile.transferTo(new File("D:/upload/" + fileName));
		}
		
		// 2. DB 연동 처리
		boardService.insertBoard(vo);
		
		// 3. 화면 네비게이션
		return "getBoardList.do";
	}
	
	@RequestMapping("/updateBoard.do")
	public String updateBoard(@ModelAttribute("board") BoardVO vo) {
		System.out.println("게시글 수정 처리");
		// 1. 사용자 입력 정보 추출
		// 2. DB 연동 처리
		boardService.updateBoard(vo);

		// 3. 화면 네비게이션
		return "getBoardList.do";
	}
	
	@RequestMapping("/deleteBoard.do")
	public String deleteBoard(BoardVO vo) {
		System.out.println("게시글 삭제 처리");
		// 1. 사용자 입력 정보 추출
		
		// 2. DB 연동 처리
		boardService.deleteBoard(vo);
		
		
		// 3. 화면 네비게이션
		return "getBoardList.do";
	}
	
	/*
	 * 입력 파라미터:
	 * 		Model model - JSP 화면으로 전달할 데이터를 저장
	 */
	@RequestMapping("/getBoard.do")
	public String getBoard(BoardVO vo, Model model) {
		System.out.println("게시글 상세 조회 처리");
		// 1. 검색할 게시글 번호 추출
		
		// 2. DB 연동 처리
		BoardVO board = boardService.getBoard(vo);
		
		// 3. 검색 결과를 세션에 저장하고 상세 화면을 리턴
		// @SessionAttributes가 설정되어 있으면 세션에도 동시에 저장됨
		model.addAttribute("board", board);
		
		return "getBoard.jsp";
	}
	
	@ModelAttribute("conditionalMap")
	public Map<String, String> searchConditionMap() {
		Map<String, String> conditionMap = new HashMap<>();
		
		conditionMap.put("제목","TITLE");
		conditionMap.put("내용","CONTENT");
//		conditionMap.put("작성자","WRITER");
		
		return conditionMap;
	}
	
	@RequestMapping(value="/getBoardList.do")
	public String getBoardList( BoardVO vo,
//			@RequestParam(value="searchCondition", defaultValue="TITLE", required=false) 
//			String condition,
//			@RequestParam(value="searchKeyword", defaultValue="", required=false)
//			String keyword,
			Model model) {
		System.out.println("게시글 목록 조회 처리");
		// 검색 조건과 단어에 대한 초기화
		if (vo.getSearchCondition() == null)
			vo.setSearchCondition("TITLE");
		if (vo.getSearchKeyword() == null)
			vo.setSearchKeyword("");
		
		System.out.println("검색 조건 : " + vo.getSearchCondition());
		System.out.println("검색 단어 : " + vo.getSearchKeyword());
		// 1. 사용자 입력 정보 추출
		// 2. DB 연동 처리
		List<BoardVO> boardList = boardService.getBoardList(vo);
		
		// DB에서 조회한 내용을 화면에 전달하기 위해 내장객체에 저장
		model.addAttribute("boardList",boardList);
		// 응답 화면 저장
		
		return "getBoardList.jsp";
	}
	
	@RequestMapping("/dataTransform.do")
	@ResponseBody
	public List<BoardVO> dataTransform(BoardVO vo){

		System.out.println("게시글 목록 조회 처리(JSON)");
		// 검색 조건과 단어에 대한 초기화
		if (vo.getSearchCondition() == null)
			vo.setSearchCondition("TITLE");
		if (vo.getSearchKeyword() == null)
			vo.setSearchKeyword("");
		
		System.out.println("검색 조건 : " + vo.getSearchCondition());
		System.out.println("검색 단어 : " + vo.getSearchKeyword());

		List<BoardVO> boardList = boardService.getBoardList(vo);
		
		return boardList;
	}
	
	@RequestMapping("/dataTransform_xml.do")
	@ResponseBody
	public List<BoardVO> dataTransform_XML(BoardVO vo){

		System.out.println("게시글 목록 조회 처리(JSON)");
		// 검색 조건과 단어에 대한 초기화
		if (vo.getSearchCondition() == null)
			vo.setSearchCondition("TITLE");
		if (vo.getSearchKeyword() == null)
			vo.setSearchKeyword("");
		
		System.out.println("검색 조건 : " + vo.getSearchCondition());
		System.out.println("검색 단어 : " + vo.getSearchKeyword());

		List<BoardVO> boardList = boardService.getBoardList(vo);
		
		return boardList;
	}
	

}
